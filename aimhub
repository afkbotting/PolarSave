local loadstring, getgenv, setclipboard, tablefind, UserInputService = loadstring, getgenv, setclipboard, table.find, game:GetService("UserInputService")

if getgenv().Aimer then
    return
end

getgenv().Aimer = {}
local pcall, next, setmetatable, Vector2new, CFramenew, Color3fromRGB, Drawingnew, TweenInfonew, stringupper, mousemoverel = pcall, next, setmetatable, Vector2.new, CFrame.new, Color3.fromRGB, Drawing.new, TweenInfo.new, string.upper, mousemoverel or (Input and Input.MouseMove)

if not getgenv().Aimer or getgenv().Aimer.Aimbot then return end

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local lplr = game:GetService("Players").LocalPlayer
local character = lplr.Character
local Camera = workspace.CurrentCamera
local RequiredDistance, Typing, Running, ServiceConnections, Animation, OriginalSensitivity = 2000, false, false, {}

getgenv().Aimer.Aimbot = {
    Settings = {
        Enabled = false,
        TeamCheck = false,
        AliveCheck = true,
        WallCheck = false,
        Sensitivity = 0,
        TriggerKey = "MouseButton2",
        Toggle = false,
        LockPart = "Head"
    },

    FOVSettings = {
        Enabled = true,
        Visible = true,
        Amount = 90,
        Color = Color3fromRGB(255, 255, 255),
        LockedColor = Color3fromRGB(255, 70, 70),
        Transparency = 0.5,
        Sides = 50,
        Thickness = 1,
        Filled = false
    },

    FOVCircle = Drawingnew("Circle")
}

local Environment = getgenv().Aimer.Aimbot

local function ConvertVector(Vector)
    return Vector2new(Vector.X, Vector.Y)
end

local function CancelLock()
    Environment.Locked = nil
    Environment.FOVCircle.Color = Environment.FOVSettings.Color
    UserInputService.MouseDeltaSensitivity = OriginalSensitivity

    if Animation then
        Animation:Cancel()
    end
end

local function GetClosestPlayer()
    if not Environment.Locked then
        RequiredDistance = (Environment.FOVSettings.Enabled and Environment.FOVSettings.Amount or 2000)

        for _, v in next, Players:GetPlayers() do
            if v ~= lplr and v.Character and v.Character:FindFirstChild(Environment.Settings.LockPart) and v.Character:FindFirstChildOfClass("Humanoid") then
                if Environment.Settings.TeamCheck and v.TeamColor == lplr.TeamColor then continue end
                if Environment.Settings.AliveCheck and v.Character:FindFirstChildOfClass("Humanoid").Health <= 0 then continue end
                if Environment.Settings.WallCheck and #(Camera:GetPartsObscuringTarget({v.Character[Environment.Settings.LockPart].Position}, v.Character:GetDescendants())) > 0 then continue end

                local Vector, OnScreen = Camera:WorldToViewportPoint(v.Character[Environment.Settings.LockPart].Position)
                Vector = ConvertVector(Vector)
                local Distance = (UserInputService:GetMouseLocation() - Vector).Magnitude

                if Distance < RequiredDistance and OnScreen then
                    RequiredDistance = Distance
                    Environment.Locked = v
                end
            end
        end
    elseif (UserInputService:GetMouseLocation() - ConvertVector(Camera:WorldToViewportPoint(Environment.Locked.Character[Environment.Settings.LockPart].Position))).Magnitude > RequiredDistance then
        CancelLock()
    end
end

local function Load()
    OriginalSensitivity = UserInputService.MouseDeltaSensitivity

    ServiceConnections.RenderSteppedConnection = RunService.RenderStepped:Connect(function()
        if Environment.FOVSettings.Enabled and Environment.Settings.Enabled then
            Environment.FOVCircle.Radius = Environment.FOVSettings.Amount
            Environment.FOVCircle.Thickness = Environment.FOVSettings.Thickness
            Environment.FOVCircle.Filled = Environment.FOVSettings.Filled
            Environment.FOVCircle.NumSides = Environment.FOVSettings.Sides
            Environment.FOVCircle.Color = Environment.FOVSettings.Color
            Environment.FOVCircle.Transparency = Environment.FOVSettings.Transparency
            Environment.FOVCircle.Visible = Environment.FOVSettings.Visible
            Environment.FOVCircle.Position = Vector2new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
        else
            Environment.FOVCircle.Visible = false
        end

        if Running and Environment.Settings.Enabled then
            GetClosestPlayer()

            if Environment.Locked then
                if Environment.Settings.ThirdPerson then
                    local Vector = Camera:WorldToViewportPoint(Environment.Locked.Character[Environment.Settings.LockPart].Position)

                    mousemoverel((Vector.X - UserInputService:GetMouseLocation().X) * Environment.Settings.ThirdPersonSensitivity, (Vector.Y - UserInputService:GetMouseLocation().Y) * Environment.Settings.ThirdPersonSensitivity)
                else
                    if Environment.Settings.Sensitivity > 0 then
                        Animation = TweenService:Create(Camera, TweenInfonew(Environment.Settings.Sensitivity, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {CFrame = CFramenew(Camera.CFrame.Position, Environment.Locked.Character[Environment.Settings.LockPart].Position)})
                        Animation:Play()
                    else
                        Camera.CFrame = CFramenew(Camera.CFrame.Position, Environment.Locked.Character[Environment.Settings.LockPart].Position)
                    end

                    UserInputService.MouseDeltaSensitivity = 0
                end

                Environment.FOVCircle.Color = Environment.FOVSettings.LockedColor
            end
        end
    end)

    ServiceConnections.InputBeganConnection = UserInputService.InputBegan:Connect(function(Input)
        if not Typing then
            pcall(function()
                if Input.UserInputType == Enum.UserInputType.Keyboard and Input.KeyCode == Enum.KeyCode[#Environment.Settings.TriggerKey == 1 and stringupper(Environment.Settings.TriggerKey) or Environment.Settings.TriggerKey] or Input.UserInputType == Enum.UserInputType[Environment.Settings.TriggerKey] then
                    if Environment.Settings.Toggle then
                        Running = not Running

                        if not Running then
                            CancelLock()
                        end
                    else
                        Running = true
                    end
                end
            end)
        end
    end)

    ServiceConnections.InputEndedConnection = UserInputService.InputEnded:Connect(function(Input)
        if not Typing then
            if not Environment.Settings.Toggle then
                pcall(function()
                    if Input.UserInputType == Enum.UserInputType.Keyboard and Input.KeyCode == Enum.KeyCode[#Environment.Settings.TriggerKey == 1 and stringupper(Environment.Settings.TriggerKey) or Environment.Settings.TriggerKey] or Input.UserInputType == Enum.UserInputType[Environment.Settings.TriggerKey] then
                        Running = false
                        CancelLock()
                    end
                end)
            end
        end
    end)
end

ServiceConnections.TypingStartedConnection = UserInputService.TextBoxFocused:Connect(function()
    Typing = true
end)

ServiceConnections.TypingEndedConnection = UserInputService.TextBoxFocusReleased:Connect(function()
    Typing = false
end)

local function esp()
    local DepthMode = "AlwaysOnTop"
    local FillTransparency = 0.5
    local OutlineTransparency = 0

    local CoreGui = game:GetService("CoreGui")
    local Players = game:GetService("Players")
    local Storage = Instance.new("Folder")
    Storage.Parent = CoreGui
    Storage.Name = "Highlight_Storage"

    local function teamColorToColor3(teamColor)
        return Color3.new(teamColor.r, teamColor.g, teamColor.b)
    end

    local function Highlight(plr)
        local teamColor = plr.TeamColor
        local Highlight = Instance.new("Highlight")
        Highlight.Name = plr.Name
        Highlight.FillColor = teamColorToColor3(teamColor)
        Highlight.DepthMode = DepthMode
        Highlight.FillTransparency = FillTransparency
        Highlight.OutlineTransparency = OutlineTransparency
        Highlight.Parent = Storage
        
        local plrchar = plr.Character
        if plrchar then
            Highlight.Adornee = plrchar
        end

        plr.CharacterAdded:Connect(function(char)
            Highlight.Adornee = char
        end)

        plr:GetPropertyChangedSignal("Team"):Connect(function()
            local newTeamColor = plr.TeamColor
            Highlight.FillColor = teamColorToColor3(newTeamColor)
        end)
    end

    local function UpdateHighlights()
        for _, player in ipairs(Players:GetPlayers()) do
            if not Storage:FindFirstChild(player.Name) then
                Highlight(player)
            end
        end
    end

    UpdateHighlights()

    Players.PlayerAdded:Connect(function(player)
        Highlight(player)
    end)

    while true do
        wait(2)
        UpdateHighlights()
    end
end

Environment.Functions = {}

function Environment.Functions:Exit()
    for _, v in next, ServiceConnections do
        v:Disconnect()
    end

    Environment.FOVCircle:Remove()

    getgenv().Aimer.Aimbot.Functions = nil
    getgenv().Aimer.Aimbot = nil

    Load = nil
    ConvertVector = nil
    CancelLock = nil
    GetClosestPlayer = nil
end

function Environment.Functions:ResetSettings()
    Environment.Settings = {
        Enabled = false,
        TeamCheck = false,
        AliveCheck = true,
        WallCheck = false,
        Sensitivity = 0.002,
        TriggerKey = "MouseButton2",
        Toggle = false,
        LockPart = "Head"
    }

    Environment.FOVSettings = {
        Enabled = true,
        Visible = true,
        Amount = 90,
        Color = Color3fromRGB(255, 255, 255),
        LockedColor = Color3fromRGB(255, 70, 70),
        Transparency = 0.5,
        Sides = 50,
        Thickness = 1,
        Filled = false
    }
end

setmetatable(Environment.Functions, {
    __newindex = warn
})

Load()

local Library = loadstring(game:GetObjects("rbxassetid://7657867786")[1].Source)()
local Aimbot, WallHack = getgenv().Aimer.Aimbot
local Parts, Fonts, TracersType = {"Head", "HumanoidRootPart", "Torso", "Left Arm", "Right Arm", "Left Leg", "Right Leg", "LeftHand", "RightHand", "LeftLowerArm", "RightLowerArm", "LeftUpperArm", "RightUpperArm", "LeftFoot", "LeftLowerLeg", "UpperTorso", "LeftUpperLeg", "RightFoot", "RightLowerLeg", "LowerTorso", "RightUpperLeg"}, {"UI", "System", "Plex", "Monospace"}, {"Bottom", "Center", "Mouse"}

Library.UnloadCallback = function()
    Aimbot.Functions:Exit()
    getgenv().Aimer = nil
end

local MainFrame = Library:CreateWindow({
    Name = "Aimer",
    Themeable = {
        Image = "7059346386",
        Credit = false
    },
    Background = "",
    Theme = [[{
            "__Designer.Colors.topGradient": "3F0C64",
            "__Designer.Colors.section": "C259FB",
            "__Designer.Colors.hoveredOptionBottom": "4819B4",
            "__Designer.Background.ImageAssetID": "rbxassetid://4427304036",
            "__Designer.Colors.selectedOption": "4E149C",
            "__Designer.Colors.unselectedOption": "482271",
            "__Designer.Files.WorkspaceFile": "Aimer",
            "__Designer.Colors.unhoveredOptionTop": "310269",
            "__Designer.Colors.outerBorder": "391D57",
            "__Designer.Background.ImageColor": "69009C",
            "__Designer.Colors.tabText": "B9B9B9",
            "__Designer.Colors.elementBorder": "160B24",
            "__Designer.Background.ImageTransparency": 100,
            "__Designer.Colors.background": "1E1237",
            "__Designer.Colors.innerBorder": "531E79",
            "__Designer.Colors.bottomGradient": "361A60",
            "__Designer.Colors.sectionBackground": "21002C",
            "__Designer.Colors.hoveredOptionTop": "6B10F9",
            "__Designer.Colors.otherElementText": "7B44A8",
            "__Designer.Colors.main": "AB26FF",
            "__Designer.Colors.elementText": "9F7DB5",
            "__Designer.Colors.unhoveredOptionBottom": "3E0088",
            "__Designer.Background.UseBackgroundImage": false
        }] ]]
})

local AimbotTab = MainFrame:CreateTab({
    Name = "Aimbot"
})

local GameTab = MainFrame:CreateTab({
    Name = "Game"
})

local VisualsTab = MainFrame:CreateTab({
    Name = "Visuals"
})

local FunctionsTab = MainFrame:CreateTab({
    Name = "Functions"
})

local Enabled = AimbotTab:CreateSection({
    Name = "Enabled"
})

local Checks = AimbotTab:CreateSection({
    Name = "Checks"
})

local FOV_Values = AimbotTab:CreateSection({
    Name = "Field Of View",
    Side = "Right"
})

local FOV_Appearance = AimbotTab:CreateSection({
    Name = "FOV Circle Appearance",
    Side = "Right"
})

local GameSection = GameTab:CreateSection({
    Name = "Game"
})

local AutogameSection = GameTab:CreateSection({
    Name = "Auto"
})

local MovementSection = GameTab:CreateSection({
    Name = "Movement"
})

local espSection = VisualsTab:CreateSection({
    Name = "Esp"
})

local charSection = VisualsTab:CreateSection({
    Name = "Character"
})

local fovSection = VisualsTab:CreateSection({
    Name = "Fov"
})

local FunctionsSection = FunctionsTab:CreateSection({
    Name = "Functions"
})

Enabled:AddToggle({
    Name = "Enabled",
    Value = Aimbot.Settings.Enabled,
    Callback = function(New, Old)
        Aimbot.Settings.Enabled = New
    end
})

Checks:AddToggle({
    Name = "Team Check",
    Value = Aimbot.Settings.TeamCheck,
    Callback = function(New, Old)
        Aimbot.Settings.TeamCheck = New
    end
})

Checks:AddToggle({
    Name = "Alive Check",
    Value = Aimbot.Settings.AliveCheck,
    Callback = function(New, Old)
        Aimbot.Settings.AliveCheck = New
    end
})

Checks:AddToggle({
    Name = "Wall Check",
    Value = Aimbot.Settings.WallCheck,
    Callback = function(New, Old)
        Aimbot.Settings.WallCheck = New
    end
})

Checks:AddTextBox({
    Name = "Trigger Key",
    Value = Aimbot.Settings.TriggerKey,
    Callback = function(New, Old)
        Aimbot.Settings.TriggerKey = New
    end
})

Checks:AddTextBox({
    Name = "Lock Part",
    Value = Aimbot.Settings.LockPart,
    Callback = function(New, Old)
        Aimbot.Settings.LockPart = New
    end
})

FOV_Values:AddToggle({
    Name = "Enabled",
    Value = Aimbot.FOVSettings.Enabled,
    Callback = function(New, Old)
        Aimbot.FOVSettings.Enabled = New
    end
})

FOV_Values:AddSlider({
    Name = "Amount",
    Min = 0,
    Max = 360,
    Value = Aimbot.FOVSettings.Amount,
    Float = 1,
    Callback = function(New, Old)
        Aimbot.FOVSettings.Amount = New
    end
})

FOV_Values:AddColorPicker({
    Name = "Color",
    Value = Aimbot.FOVSettings.Color,
    Callback = function(New, Old)
        Aimbot.FOVSettings.Color = New
    end
})

FOV_Values:AddColorPicker({
    Name = "Locked Color",
    Value = Aimbot.FOVSettings.LockedColor,
    Callback = function(New, Old)
        Aimbot.FOVSettings.LockedColor = New
    end
})

FOV_Values:AddSlider({
    Name = "Transparency",
    Min = 0,
    Max = 1,
    Value = Aimbot.FOVSettings.Transparency,
    Float = 0.01,
    Callback = function(New, Old)
        Aimbot.FOVSettings.Transparency = New
    end
})

FOV_Values:AddSlider({
    Name = "Thickness",
    Min = 0,
    Max = 10,
    Value = Aimbot.FOVSettings.Thickness,
    Float = 0.01,
    Callback = function(New, Old)
        Aimbot.FOVSettings.Thickness = New
    end
})

FOV_Values:AddSlider({
    Name = "Sides",
    Min = 3,
    Max = 50,
    Value = Aimbot.FOVSettings.Sides,
    Callback = function(New, Old)
        Aimbot.FOVSettings.Sides = New
    end
})

FOV_Values:AddToggle({
    Name = "Filled",
    Value = Aimbot.FOVSettings.Filled,
    Callback = function(New, Old)
        Aimbot.FOVSettings.Filled = New
    end
})

local autoPlantbankEnabled = false
local autoPlantbankProcess = nil
AutogameSection:AddToggle({
    Name = "Auto bank",
    Value = false,
    Callback = function(enabled)
        autoPlantbankEnabled = enabled
        if enabled then
            autoPlantbankProcess = coroutine.create(function()
                while autoPlantbankEnabled do
                    game:GetService("ReplicatedStorage"):WaitForChild("Bank"):WaitForChild("PlantVaultExplosive"):FireServer()
                    wait(1.88) 
                end
            end)
            coroutine.resume(autoPlantbankProcess)
        else
            autoPlantbankEnabled = false
            if autoCashRegisterProcess then
                coroutine.yield(autoPlantbankProcess)
                autoPlantbankProcess = nil
            end
        end
    end
})

GameSection:AddToggle({
    Name = "Fps boost",
    Value = false,
    Callback = function()
        local workspace = game:GetService("Workspace")
        local namesToDelete = {
            "Stop Sign", "Road Sign", "StreetSign Model", "BuildingNumbers", "Bigfoot", 
            "Sewer Drain", "PowerLinesUnit", "Park Signs", "PowerLinesUnit2", "PowerLinesUnit", 
            "JailDoors", "SpeedLimitSigns", "Traffic Lights", "Basketballs", "Desktop PC", 
            "Road Lines", "FireHydrants", "Vegetation", "Sign", "Smoke Stack", "Potted Bush", 
            "Do Not Enter", "Tree", "HayRound", "Bench Metal", "Picnic bench", "MiningCart", 
            "Pipe", "Highway Sign", "BusStops", "PostalCodes", "Mailboxes", 
            "TrafficDetections", "NewspaperVendingMachines", "Picnic bench", "Traffic Lights", 
            "Street Lamps", "SewerCover", "Spotlights", "Lanterns", "Flood Light Trailer", "Water tower",
            "WeatherIgnore", "TrashCan_Interactions", "Bush"
        }

        for _, name in ipairs(namesToDelete) do
            for _, child in ipairs(workspace:GetChildren()) do
                if child.Name == name then
                    child:Destroy()
                elseif child:IsA("Model") and child.Name == name then
                    child:Destroy()
                end
            end
        end
    end
})

local Multiplier = 0.5
local SE = false
local SL = nil
local function MoveCharacter()
    while SE do
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + game.Players.LocalPlayer.Character.Humanoid.MoveDirection * Multiplier
        game:GetService("RunService").Stepped:wait()
    end
end
local function adjustSL(speed)
    Multiplier = speed
end

MovementSection:AddToggle({
    Name = "Walk Speed",
    Value = WalkSpeedEnabled,
    Keybind = 1,
    Callback = function(enabled)
        WalkSpeedEnabled = enabled
        if enabled then
            SE = true
            adjustSL(WalkSpeedValue)
            MoveCharacter()
        else
            SE = false
            if SL then
                SL:Disconnect()
            end
        end
    end
})

MovementSection:AddSlider({
    Name = "Walk Speed Value",
    Min = 0,
    Max = 100,
    Value = WalkSpeedValue,
    Float = 1,
    Callback = function(New, Old)
        WalkSpeedValue = New / 10
        if WalkSpeedEnabled then
            adjustSL(WalkSpeedValue)
        end
    end
})



espSection:AddToggle({
	Name = "Esp",
	Value = false,
	Callback = function()
			esp()
	end
})

espSection:AddToggle({
    Name = "saver",
    Value = false,
    Callback = function(saverEnabled)
        if saverEnabled then
            local player = game.Players.LocalPlayer

            local function findPlayerWithinRange(localPlayer, maxDistance)
                for _, otherPlayer in ipairs(game.Players:GetPlayers()) do
                    if otherPlayer ~= localPlayer and otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") and otherPlayer.Character:FindFirstChild("Humanoid").Health > 0 then
                        local distance = (otherPlayer.Character.HumanoidRootPart.Position - localPlayer.Character.HumanoidRootPart.Position).magnitude
                        if distance <= maxDistance then
                            return true
                        end
                    end
                end
                return false
            end

            local screenGui = Instance.new("ScreenGui")
            screenGui.ResetOnSpawn = false
            screenGui.Name = "SafetyIndicator"
            screenGui.Parent = game:GetService("CoreGui")

            local textLabel = Instance.new("TextLabel")
            textLabel.Size = UDim2.new(0, 150, 0, 30)
            textLabel.Position = UDim2.new(0.5, 325, 0.5, 35)
            textLabel.AnchorPoint = Vector2.new(0.5, 0.5)
            textLabel.BackgroundTransparency = 1
            textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            textLabel.TextSize = 20
            textLabel.Text = "Safe"
            textLabel.Parent = screenGui

            while saverEnabled do
                wait(0.1)
                local isPlayerWithinRange = findPlayerWithinRange(player, 50)
                if isPlayerWithinRange then
                    textLabel.Text = "Not safe"
                    textLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
                else
                    textLabel.Text = "Safe"
                    textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                end
            end
            screenGui:Destroy()
        else
            local existingGui = game:GetService("CoreGui"):FindFirstChild("SafetyIndicator")
            if existingGui then
                existingGui:Destroy()
            end
        end
    end
})

local animEnabled = false
local loopEnabled = false
charSection:AddToggle({
    Name = "Character changer",
    Value = false,
    Callback = function(newValue)
        animEnabled = newValue
        if newValue and not loopEnabled then
            loopEnabled = true
            RunLoop()
        elseif not newValue then
            loopEnabled = false
        end
    end
})

function ApplyCharacterModifications()
    local char = game:GetService("Players").LocalPlayer.Character
    if char then
        char.Head.MeshId = "http://www.roblox.com/asset/?id=15093053680"
        char.Head.Transparency = 1
    end
end

function Anim()
    local Animate = game.Players.LocalPlayer.Character:WaitForChild("Animate")
    Animate.idle.Animation1.AnimationId = "rbxassetid://616158929"
    Animate.idle.Animation2.AnimationId = "rbxassetid://616160636"
    Animate.walk.WalkAnim.AnimationId = "rbxassetid://616168032"
    Animate.run.RunAnim.AnimationId = "rbxassetid://616163682"
    Animate.jump.JumpAnim.AnimationId = "rbxassetid://616161997"
    Animate.climb.ClimbAnim.AnimationId = "rbxassetid://616156119"
    Animate.fall.FallAnim.AnimationId = "rbxassetid://616157476"
end

function onCharacterAdded(character)
    character:WaitForChild("Animate")
    if animEnabled then
        Anim()
        ApplyCharacterModifications()
    end
end

game.Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(onCharacterAdded)
end)

function RunLoop()
    while loopEnabled do
        wait(0.5)
        if animEnabled and game.Players.LocalPlayer.Character then
            Anim()
            ApplyCharacterModifications()
        end
    end
end

FunctionsSection:AddButton({
	Name = "Reset Settings",
	Callback = function()
		Aimbot.Functions:ResetSettings()
		WallHack.Functions:ResetSettings()
		Library.ResetAll()
	end
})

FunctionsSection:AddButton({
	Name = "Exit",
	Callback = Library.Unload,
})
